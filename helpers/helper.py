from typing import List

import streamlit as st
from streamlit.runtime.uploaded_file_manager import UploadedFile

from models.llm import LLM_
from image_extractors.excel_ import ExcelImageExtractor
from image_extractors.doc_ import DocImageExtractor
from image_extractors.pdf_ import PDFImageExtractor
from image_extractors.ppt_ import PPTImageExtractor


class Helper:
    """
    A helper class for extracting images from various file types (PDF, Word, Excel, PowerPoint) and displaying them
    with descriptions generated by a language model.

    Methods:
        extract_images_from_uploaded_file(file_type: str, uploaded_files: List[UploadedFile]): Extracts images
            from the uploaded files based on the file type (PDF, Word, Excel, PowerPoint).
        extract_images_from_excel_file(uploaded_files: List[UploadedFile]): Extracts images from Excel files.
        extract_images_from_word_file(uploaded_docs: List[UploadedFile]): Extracts images from Word documents.
        extract_images_from_pdf_file(uploaded_files: List[UploadedFile]): Extracts images from PDF files.
        extract_images_from_ppt_file(uploaded_ppts: List[UploadedFile]): Extracts images from PowerPoint files.
    """
    def __init__(self):
        llm = LLM_()
        self.excel_img_extractor = ExcelImageExtractor(llm)
        self.doc_img_extractor = DocImageExtractor(llm)
        self.pdf_img_extractor = PDFImageExtractor(llm)
        self.ppt_img_extractor = PPTImageExtractor(llm)

    def extract_images_from_uploaded_file(
        self, file_type: str, uploaded_files: List[UploadedFile]
    ):
        try:
            if file_type == "PDF":
                self.extract_images_from_pdf_file(uploaded_files)
            elif file_type == "Word":
                self.extract_images_from_word_file(uploaded_files)
            elif file_type == "Excel":
                self.extract_images_from_excel_file(uploaded_files)
            else:
                self.extract_images_from_ppt_file(uploaded_files)
        except Exception as e:
            print(e)
            raise

    def extract_images_from_excel_file(self, uploaded_files: List[UploadedFile]):
        """
        Extracts images from Excel files and displays them with descriptions.

        Args:
            uploaded_files (List[UploadedFile]): A list of Excel files to extract images from.

        Returns:
            None
        """
        try:
            if uploaded_files:
                for uploaded_file in uploaded_files:
                    st.header(f"File Name: {uploaded_file.name}")
                    if uploaded_file:
                        images_data = (
                            self.excel_img_extractor.extract_images_from_excel_file(
                                uploaded_file.read()
                            )
                        )

                        for sheet, img_data in images_data.items():
                            st.subheader(f"Sheet Name: {sheet}")

                            if img_data:
                                for idx, img in enumerate(img_data):
                                    col1, col2 = st.columns(2, border=True)
                                    col1.image(
                                        img[0],
                                        caption=f"Image {idx + 1}",
                                        use_container_width=True,
                                    )
                                    col2.markdown(img[1])
                            else:
                                st.write("No images found on this sheet.")
        except Exception as e:
            print(e)
            raise

    def extract_images_from_word_file(self, uploaded_docs: List[UploadedFile]):
        """
        Extracts images from Word documents and displays them with descriptions.

        Args:
            uploaded_docs (List[UploadedFile]): A list of Word files to extract images from.

        Returns:
            None
        """
        try:
            if uploaded_docs:
                for uploaded_file in uploaded_docs:
                    st.header(f"File Name: {uploaded_file.name}")
                    image_data = (
                        self.doc_img_extractor.extract_images_pagewise_from_word(
                            uploaded_file.read()
                        )
                    )

                    for page_num in sorted(
                        k for k in image_data.keys() if isinstance(k, int)
                    ):
                        st.subheader(f"Page No: {page_num}")
                        images = image_data.get(page_num)
                        if not images:
                            st.write("No images found on this page.")
                        for i, img in enumerate(images):
                            col1, col2 = st.columns(2, border=True)
                            col1.image(
                                img[0],
                                caption=f"Image {i + 1}",
                                use_container_width=True,
                            )
                            col2.markdown(img[1])

                    if image_data.get("header_footer"):
                        st.markdown("### Header/Footer Images")
                        for i, img in enumerate(image_data["header_footer"]):
                            col1, col2 = st.columns(2, border=True)
                            col1.image(
                                img[0],
                                caption=f"Image {i + 1}",
                                use_container_width=True,
                            )
                            col2.markdown(img[1])

                    if image_data.get("tables"):
                        st.markdown("### Table Images")
                        for i, img in enumerate(image_data["tables"]):
                            col1, col2 = st.columns(2, border=True)
                            col1.image(
                                img[0],
                                caption=f"Image {i + 1}",
                                use_container_width=True,
                            )
                            col2.markdown(img[1])
        except Exception as e:
            print(e)
            raise

    def extract_images_from_pdf_file(self, uploaded_files: List[UploadedFile]):
        """
        Extracts images from PDF files and displays them with descriptions.

        Args:
            uploaded_files (List[UploadedFile]): A list of PDF files to extract images from.

        Returns:
            None
        """
        try:
            if uploaded_files:
                for pdf_file in uploaded_files:
                    st.header(f"File Name: {pdf_file.name}")
                    image_data = self.pdf_img_extractor.extract_images_pagewise(
                        pdf_file.read()
                    )

                    for page, images in image_data.items():
                        st.subheader(f"Page No: {page}")

                        if not images:
                            st.write("No images found on this page.")
                        else:
                            for idx, image_info in enumerate(images):
                                col1, col2 = st.columns(2, border=True)
                                col1.image(
                                    image_info["image_bytes"],
                                    caption=f"Image {idx + 1} (.{image_info['ext']})",
                                    use_container_width=True,
                                )
                                col2.markdown(image_info["description"])
        except Exception as e:
            print(e)
            raise

    def extract_images_from_ppt_file(self, uploaded_ppts: List[UploadedFile]):
        """
        Extracts images from PowerPoint files and displays them with descriptions.

        Args:
            uploaded_ppts (List[UploadedFile]): A list of PowerPoint files to extract images from.

        Returns:
            None
        """
        try:
            if uploaded_ppts:
                for uploaded_ppt in uploaded_ppts:
                    st.header(f"File Name: {uploaded_ppt.name}")
                    slides = self.ppt_img_extractor.extract_images_from_pptx(
                        uploaded_ppt.read()
                    )

                    for slide_num, images_data in slides.items():
                        st.subheader(f"Slide No: {slide_num}")

                        if images_data:
                            for idx, img in enumerate(images_data):
                                col1, col2 = st.columns(2, border=True)
                                col1.image(
                                    img[0],
                                    caption=f"Image {idx + 1}",
                                    use_container_width=True,
                                )
                                col2.markdown(img[1])
                        else:
                            st.write("No images found on this slide.")
        except Exception as e:
            print(e)
            raise
